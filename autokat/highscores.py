import bisect
import json
from pathlib import Path
import random
from typing import NamedTuple

ADJECTIVES = [
    "bright",
    "confused",
    "confident",
    "courageous",
    "crazy",
    "cunning",
    "curious",
    "daring",
    "dark",
    "determined",
    "devoted",
    "dizzy",
    "doubtful",
    "dreamy",
    "drunk",
    "eager",
    "elegant",
    "evil",
    "excited",
    "fierce",
    "foolish",
    "friendly",
    "gentle",
    "gloomy",
    "graceful",
    "grumpy",
    "happy",
    "radical",
    "harsh",
    "honest",
    "hopeful",
    "humble",
    "hungry",
    "hysterical",
    "idealistic",
    "ignorant",
    "impatient",
    "independent",
    "indifferent",
    "innocent",
    "insane",
    "intelligent",
    "intuitive",
    "irrational",
    "jealous",
    "joyful",
    "kind",
    "lazy",
    "aggressive",
    "fundamentalist",
    "discordant",
    "hegelian",
    "marxist",
    "Kantian",
    "absurdist",
    "agnostic",
    "atheist",
    "capitalist",
    "cynical",
    "deist",
    "dogmatic",
    "egoistic",
    "empiricist",
    "Epicurian",
    "Freudian",
    "gnostic",
    "naturalist",
    "nihilist",
    "holistic",
    "platonic",
    "ontological",
    "pluralist",
    "positivist",
    "pragmatic",
    "rationalist",
    "realist",
    "relativist",
    "skeptic",
    "stoic",
    "subjectivist",
    "scholastic",
    "surrealist",
    "symbolist",
    "theosophist",
    "transcendentalist",
    "utilitarian",
    "vitalist",
    "secularist",
]

SUBJECTS = [
    "philosophers",
    "sofists",
    "dreamers",
    "scientists",
    "artists",
    "machiavellists",
    "technocrats",
    "intellectuals",
    "nihilists",
    "existentialists",
    "anarchists",
    "libertarians",
    "socialists",
    "communists",
    "capitalists",
    "futurists",
    "realists",
    "idealists",
    "pragmatists",
    "utopians",
    "visionaries",
    "revolutionaries",
    "reformists",
    "conservatives",
    "progressives",
    "reactionaries",
    "radicals",
    "moderates",
    "centrists",
    "populists",
    "elitists",
    "nationalists",
    "globalists",
    "isolationists",
    "imperialists",
    "colonialists",
    "federalists",
    "separatists",
    "unionists",
    "syndicalists",
    "mutualists",
    "individualists",
    "collectivists",
    "communitarians",
    "hegelians",
    "marxists",
    "agnostics",
    "atheists",
    "capitalists",
    "formalists",
    "redactionists",
    "relativists",
    "materialists",
    "neo-platonists",
    "prescriptivists",
    "pre-socratics",
    "pythagoreanists",
    "behaviorists",
    "cognitivists",
    "constructivists",
    "empiricists",
    "existentialists",
    "functionalists",
    "idealists",
    "phenomenologists",
    "pragmatists",
    "rationalists",
    "structuralists",
    "post-structuralists",
    "deconstructionists",
]

DEFAULT_HIGHSCORES_PATH = Path("highscores.json")

class Highscore(NamedTuple):
    team_name: str
    score: int


class Highscores:
    def __init__(self, path: str = DEFAULT_HIGHSCORES_PATH):
        self._path = path
        raw_highscores = path.read_text()
        self._highscores = [Highscore(**score) for score in json.loads(raw_highscores)]

    def add_score(self, team_name, score):
        highscore = Highscore(team_name=team_name, score=score)
        insertion_index = bisect.bisect_right(self._highscores, -highscore.score, key=lambda x: -x.score)
        self._highscores.insert(insertion_index, highscore)
        self._path.write_text(json.dumps([h._asdict() for h in self._highscores]))
        return highscore, insertion_index

    def top(self, n: int):
        return self._highscores[:n]

def generate_team_name():
    return f"{random.choice(ADJECTIVES)} {random.choice(SUBJECTS)}"
